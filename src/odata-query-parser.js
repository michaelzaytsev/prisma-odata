// Generated by Peggy 3.0.2.
//
// https://peggyjs.org/

"use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { Process: peg$parseProcess, ProcessRule: peg$parseProcessRule };
  var peg$startRuleFunction = peg$parseProcess;

  var peg$c0 = "/$metadata";
  var peg$c1 = "/";
  var peg$c2 = "&";
  var peg$c3 = "$";
  var peg$c4 = "%24";
  var peg$c5 = "@";
  var peg$c6 = "=";
  var peg$c7 = "orderby=";
  var peg$c8 = ",";
  var peg$c9 = "asc";
  var peg$c10 = "desc";
  var peg$c11 = "top=";
  var peg$c12 = "skip=";
  var peg$c13 = "inlinecount=";
  var peg$c14 = "allpages";
  var peg$c15 = "none";
  var peg$c16 = "count=";
  var peg$c17 = "expand=";
  var peg$c18 = "select=";
  var peg$c19 = "*";
  var peg$c20 = "filter=";
  var peg$c21 = "+";
  var peg$c22 = "json";
  var peg$c23 = "atom";
  var peg$c24 = "xml";
  var peg$c25 = "format=";
  var peg$c26 = ";";
  var peg$c27 = "odata.";
  var peg$c28 = "metadata=";
  var peg$c29 = "minimal";
  var peg$c30 = "full";
  var peg$c31 = "in";
  var peg$c32 = "(";
  var peg$c33 = ")";
  var peg$c34 = "eq";
  var peg$c35 = "ne";
  var peg$c36 = "gt";
  var peg$c37 = "ge";
  var peg$c38 = "lt";
  var peg$c39 = "le";
  var peg$c40 = "and";
  var peg$c41 = "or";
  var peg$c42 = "sub";
  var peg$c43 = "add";
  var peg$c44 = "mod";
  var peg$c45 = "div";
  var peg$c46 = "mul";
  var peg$c47 = "not";
  var peg$c48 = "cast";
  var peg$c49 = "ceiling";
  var peg$c50 = "concat";
  var peg$c51 = "contains";
  var peg$c52 = "date";
  var peg$c53 = "day";
  var peg$c54 = "endswith";
  var peg$c55 = "floor";
  var peg$c56 = "fractionalseconds";
  var peg$c57 = "hour";
  var peg$c58 = "indexof";
  var peg$c59 = "isof";
  var peg$c60 = "length";
  var peg$c61 = "maxdatetime";
  var peg$c62 = "mindatetime";
  var peg$c63 = "minute";
  var peg$c64 = "month";
  var peg$c65 = "now";
  var peg$c66 = "replace";
  var peg$c67 = "round";
  var peg$c68 = "second";
  var peg$c69 = "startswith";
  var peg$c70 = "substringof";
  var peg$c71 = "substring";
  var peg$c72 = "time";
  var peg$c73 = "tolower";
  var peg$c74 = "totaloffsetminutes";
  var peg$c75 = "totalseconds";
  var peg$c76 = "toupper";
  var peg$c77 = "trim";
  var peg$c78 = "year";
  var peg$c79 = "any";
  var peg$c80 = "all";
  var peg$c81 = ":";
  var peg$c82 = "/$count";
  var peg$c83 = "/$links";
  var peg$c84 = "?";
  var peg$c85 = ".";
  var peg$c86 = "null";
  var peg$c87 = "true";
  var peg$c88 = "false";
  var peg$c89 = "duration";
  var peg$c90 = "P";
  var peg$c91 = "D";
  var peg$c92 = "T";
  var peg$c93 = "H";
  var peg$c94 = "M";
  var peg$c95 = "S";
  var peg$c96 = "%2B";
  var peg$c97 = "-";
  var peg$c98 = "'";
  var peg$c99 = "%27";
  var peg$c100 = "datetime";
  var peg$c101 = " ";
  var peg$c102 = "%20";

  var peg$r0 = /^[a-z]/i;
  var peg$r1 = /^[&;]/;
  var peg$r2 = /^[^:\/?#[\]@!$*&()+,;= %]/;
  var peg$r3 = /^[0-9]/;
  var peg$r4 = /^[^:\/?#[\]@!$*&()+,;=]/;

  var peg$e0 = peg$literalExpectation("/$metadata", false);
  var peg$e1 = peg$literalExpectation("/", false);
  var peg$e2 = peg$literalExpectation("&", false);
  var peg$e3 = peg$otherExpectation("$ query options");
  var peg$e4 = peg$literalExpectation("$", false);
  var peg$e5 = peg$literalExpectation("%24", false);
  var peg$e6 = peg$literalExpectation("@", false);
  var peg$e7 = peg$literalExpectation("=", false);
  var peg$e8 = peg$literalExpectation("orderby=", false);
  var peg$e9 = peg$literalExpectation(",", false);
  var peg$e10 = peg$literalExpectation("asc", false);
  var peg$e11 = peg$literalExpectation("desc", false);
  var peg$e12 = peg$literalExpectation("top=", false);
  var peg$e13 = peg$literalExpectation("skip=", false);
  var peg$e14 = peg$literalExpectation("inlinecount=", false);
  var peg$e15 = peg$literalExpectation("allpages", false);
  var peg$e16 = peg$literalExpectation("none", false);
  var peg$e17 = peg$literalExpectation("count=", false);
  var peg$e18 = peg$literalExpectation("expand=", false);
  var peg$e19 = peg$literalExpectation("select=", false);
  var peg$e20 = peg$literalExpectation("*", false);
  var peg$e21 = peg$literalExpectation("filter=", false);
  var peg$e22 = peg$classExpectation([["a", "z"]], false, true);
  var peg$e23 = peg$literalExpectation("+", false);
  var peg$e24 = peg$literalExpectation("json", false);
  var peg$e25 = peg$literalExpectation("atom", false);
  var peg$e26 = peg$literalExpectation("xml", false);
  var peg$e27 = peg$literalExpectation("format=", false);
  var peg$e28 = peg$literalExpectation(";", false);
  var peg$e29 = peg$literalExpectation("odata.", false);
  var peg$e30 = peg$literalExpectation("metadata=", false);
  var peg$e31 = peg$literalExpectation("minimal", false);
  var peg$e32 = peg$literalExpectation("full", false);
  var peg$e33 = peg$literalExpectation("in", false);
  var peg$e34 = peg$literalExpectation("(", false);
  var peg$e35 = peg$literalExpectation(")", false);
  var peg$e36 = peg$literalExpectation("eq", false);
  var peg$e37 = peg$literalExpectation("ne", false);
  var peg$e38 = peg$literalExpectation("gt", false);
  var peg$e39 = peg$literalExpectation("ge", false);
  var peg$e40 = peg$literalExpectation("lt", false);
  var peg$e41 = peg$literalExpectation("le", false);
  var peg$e42 = peg$literalExpectation("and", false);
  var peg$e43 = peg$literalExpectation("or", false);
  var peg$e44 = peg$literalExpectation("sub", false);
  var peg$e45 = peg$literalExpectation("add", false);
  var peg$e46 = peg$literalExpectation("mod", false);
  var peg$e47 = peg$literalExpectation("div", false);
  var peg$e48 = peg$literalExpectation("mul", false);
  var peg$e49 = peg$literalExpectation("not", false);
  var peg$e50 = peg$literalExpectation("cast", false);
  var peg$e51 = peg$literalExpectation("ceiling", false);
  var peg$e52 = peg$literalExpectation("concat", false);
  var peg$e53 = peg$literalExpectation("contains", false);
  var peg$e54 = peg$literalExpectation("date", false);
  var peg$e55 = peg$literalExpectation("day", false);
  var peg$e56 = peg$literalExpectation("endswith", false);
  var peg$e57 = peg$literalExpectation("floor", false);
  var peg$e58 = peg$literalExpectation("fractionalseconds", false);
  var peg$e59 = peg$literalExpectation("hour", false);
  var peg$e60 = peg$literalExpectation("indexof", false);
  var peg$e61 = peg$literalExpectation("isof", false);
  var peg$e62 = peg$literalExpectation("length", false);
  var peg$e63 = peg$literalExpectation("maxdatetime", false);
  var peg$e64 = peg$literalExpectation("mindatetime", false);
  var peg$e65 = peg$literalExpectation("minute", false);
  var peg$e66 = peg$literalExpectation("month", false);
  var peg$e67 = peg$literalExpectation("now", false);
  var peg$e68 = peg$literalExpectation("replace", false);
  var peg$e69 = peg$literalExpectation("round", false);
  var peg$e70 = peg$literalExpectation("second", false);
  var peg$e71 = peg$literalExpectation("startswith", false);
  var peg$e72 = peg$literalExpectation("substringof", false);
  var peg$e73 = peg$literalExpectation("substring", false);
  var peg$e74 = peg$literalExpectation("time", false);
  var peg$e75 = peg$literalExpectation("tolower", false);
  var peg$e76 = peg$literalExpectation("totaloffsetminutes", false);
  var peg$e77 = peg$literalExpectation("totalseconds", false);
  var peg$e78 = peg$literalExpectation("toupper", false);
  var peg$e79 = peg$literalExpectation("trim", false);
  var peg$e80 = peg$literalExpectation("year", false);
  var peg$e81 = peg$literalExpectation("any", false);
  var peg$e82 = peg$literalExpectation("all", false);
  var peg$e83 = peg$literalExpectation(":", false);
  var peg$e84 = peg$literalExpectation("/$count", false);
  var peg$e85 = peg$classExpectation(["&", ";"], false, false);
  var peg$e86 = peg$literalExpectation("/$links", false);
  var peg$e87 = peg$literalExpectation("?", false);
  var peg$e88 = peg$classExpectation([":", "/", "?", "#", "[", "]", "@", "!", "$", "*", "&", "(", ")", "+", ",", ";", "=", " ", "%"], true, false);
  var peg$e89 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e90 = peg$literalExpectation(".", false);
  var peg$e91 = peg$literalExpectation("null", false);
  var peg$e92 = peg$literalExpectation("true", false);
  var peg$e93 = peg$literalExpectation("false", false);
  var peg$e94 = peg$literalExpectation("duration", false);
  var peg$e95 = peg$literalExpectation("P", false);
  var peg$e96 = peg$literalExpectation("D", false);
  var peg$e97 = peg$literalExpectation("T", false);
  var peg$e98 = peg$literalExpectation("H", false);
  var peg$e99 = peg$literalExpectation("M", false);
  var peg$e100 = peg$literalExpectation("S", false);
  var peg$e101 = peg$classExpectation([":", "/", "?", "#", "[", "]", "@", "!", "$", "*", "&", "(", ")", "+", ",", ";", "="], true, false);
  var peg$e102 = peg$literalExpectation("%2B", false);
  var peg$e103 = peg$literalExpectation("-", false);
  var peg$e104 = peg$literalExpectation("'", false);
  var peg$e105 = peg$literalExpectation("%27", false);
  var peg$e106 = peg$anyExpectation();
  var peg$e107 = peg$literalExpectation("datetime", false);
  var peg$e108 = peg$literalExpectation(" ", false);
  var peg$e109 = peg$literalExpectation("%20", false);

  var peg$f0 = function() {reset(); return true;};
  var peg$f1 = function(tree) { return { tree, binds } };
  var peg$f2 = function() {
		reset();
		const tree = eval(`peg$parse${options.rule}()`);
		return {
			tree,
			binds
		}
	};
  var peg$f3 = function(model) { return model };
  var peg$f4 = function() { return { resource: '$metadata' } };
  var peg$f5 = function() { return { resource: '$serviceroot' } };
  var peg$f6 = function(options) { return CollapseObjectArray(options) };
  var peg$f7 = function(name, n) { return [ 'Real', n ] };
  var peg$f8 = function(name, b) { return [ 'Boolean', b ] };
  var peg$f9 = function(name, s) { return [ 'Text', s ] };
  var peg$f10 = function(name, value) { return !binds['@' + name] };
  var peg$f11 = function(name, value) {
		binds['@' + name] = value
		return {
			name: '@' + name,
			value
		}
	};
  var peg$f12 = function(name, value) { return { name, value } };
  var peg$f13 = function(properties) { return { name: '$orderby', value: { properties } } };
  var peg$f14 = function(property) { return 'desc' };
  var peg$f15 = function(property, order) {
		property.order = order;
		return property
	};
  var peg$f16 = function(value) { return { name: '$top', value } };
  var peg$f17 = function(value) { return { name: '$skip', value } };
  var peg$f18 = function() { return '' };
  var peg$f19 = function(value) { return { name: '$inlinecount', value } };
  var peg$f20 = function(value) { return { name: '$count', value } };
  var peg$f21 = function(properties) { return { name: '$expand', value: { properties } } };
  var peg$f22 = function(properties) { return { properties } };
  var peg$f23 = function(value) { return { name: '$select', value } };
  var peg$f24 = function(expr) { return { name: '$filter', value: expr } };
  var peg$f25 = function(type, metadata) { return { name: '$format', value: { type, metadata } } };
  var peg$f26 = function(type) { return { name: '$format', value: type } };
  var peg$f27 = function() {
		precedence = 0;
	};
  var peg$f28 = function() {
			return precedence;
		};
  var peg$f29 = function(minPrecedence, x) { return [x] };
  var peg$f30 = function(minPrecedence, lhs, op) {
				precedence = operatorPrecedence[op] + 1
				return precedence > minPrecedence
			};
  var peg$f31 = function(minPrecedence, lhs, op, rhs) {
				if (Array.isArray(lhs[0]) && op === lhs[0][0]) {
					lhs[0].push(rhs);
				} else {
					lhs[0] = [ op, lhs[0], rhs ];
				}
			};
  var peg$f32 = function(minPrecedence, lhs, op, rhs) {lhs[0] = [ op, lhs[0], rhs ]};
  var peg$f33 = function(minPrecedence, lhs) { return lhs[0] };
  var peg$f34 = function(minPrecedence) {return minPrecedence > 0};
  var peg$f35 = function(minPrecedence) {
			precedence = 0;
			return peg$parseFilterByExpressionLoop()
		};
  var peg$f36 = function(methodName) { return [] };
  var peg$f37 = function(methodName, args) { return args.length === methods[methodName] || (Array.isArray(methods[methodName]) && methods[methodName].includes(args.length)) };
  var peg$f38 = function(methodName, args) { return [ 'call', { args, method: methodName } ] };
  var peg$f39 = function(name, identifier, expression) { return { expression, identifier, method: name } };
  var peg$f40 = function(methodName) { return [] };
  var peg$f41 = function(methodName, args) { return [ 'call', { args, method: methodName } ] };
  var peg$f42 = function(resource, property, option) { return CollapseObjectArray([option]) };
  var peg$f43 = function(resource, property, optionsObj) { return { count: true, options: optionsObj } };
  var peg$f44 = function(resource, property, countOptions) { return { name: resource, property, ...countOptions } };
  var peg$f45 = function(resource) { return true };
  var peg$f46 = function(resource, count, options) { return CollapseObjectArray(options) };
  var peg$f47 = function(resource, count) { return {} };
  var peg$f48 = function(resource, count, optionsObj, next) { return { name: resource, property: next, count, options: optionsObj} };
  var peg$f49 = function(resource, next) { return { name: resource, property: next } };
  var peg$f50 = function(resource, lambda) { return { name: resource, lambda } };
  var peg$f51 = function(resource, method) { return { name: resource, method } };
  var peg$f52 = function(keyBinds) { return CollapseObjectArray(keyBinds) };
  var peg$f53 = function(name, value) { return { name, value }};
  var peg$f54 = function(resource) { return { resource } };
  var peg$f55 = function(result, key) { result.key = key };
  var peg$f56 = function(result, link) {result.link = link};
  var peg$f57 = function(result, property) {result.property = property};
  var peg$f58 = function(result) {result.count = true};
  var peg$f59 = function(result) { return result };
  var peg$f60 = function(result, link) {result.link = link};
  var peg$f61 = function(result, property) {result.property = property};
  var peg$f62 = function(result) { return result };
  var peg$f63 = function(result, options) {result.options = options};
  var peg$f64 = function(result) { return result };
  var peg$f65 = function(resource) { return { resource } };
  var peg$f66 = function(result, key) { result.key = key };
  var peg$f67 = function(result, link) {result.link = link};
  var peg$f68 = function(result, property) {result.property = property};
  var peg$f69 = function(result) {result.count = true};
  var peg$f70 = function(result, options) {result.options = options};
  var peg$f71 = function(result) { return result };
  var peg$f72 = function(resourceName) { return decodeURIComponent(resourceName) };
  var peg$f73 = function(sign, d) { return Number(sign + d) };
  var peg$f74 = function(d) { return parseInt(d, 10) };
  var peg$f75 = function() { return null };
  var peg$f76 = function() { return true };
  var peg$f77 = function() { return false };
  var peg$f78 = function(sign, day, hour, minute, second) {return hour || minute || second};
  var peg$f79 = function(sign, day, hour, minute, second) {
			return {
				hour: hour || undefined,
				minute: minute || undefined,
				second: second || undefined
			}
		};
  var peg$f80 = function(sign, day, time) {return day || time};
  var peg$f81 = function(sign, day, time) { return {
		negative: sign === '-',
		day: day || undefined,
		hour: time?.hour,
		minute: time?.minute,
		second: time?.second,
	} };
  var peg$f82 = function(d) { return Number(d) };
  var peg$f83 = function(text) { return decodeURIComponent(text) };
  var peg$f84 = function() { return '+' };
  var peg$f85 = function() { return '\'' };
  var peg$f86 = function(text) { return decodeURIComponent(text.join('')) };
  var peg$f87 = function(param) { return { bind: '@' + param } };
  var peg$f88 = function(n) { return Bind('Real', n) };
  var peg$f89 = function() { return 'Date Time' };
  var peg$f90 = function() { return 'Date' };
  var peg$f91 = function(type, date) { return Date.parse(date) };
  var peg$f92 = function(type, date) { return isNaN(date) };
  var peg$f93 = function(type, date) { return [type, date] };
  var peg$f94 = function(d) { return Bind(d[0], d[1]) };
  var peg$f95 = function(b) { return Bind('Boolean', b) };
  var peg$f96 = function(resource) {
		const bind = Bind('ContentReference', resource)
		return { resource: bind, key: bind }
	};
  var peg$f97 = function(t) { return Bind('Text', t) };
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$resultsCache = {};

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseProcess() {
    var s0, s1, s2;

    var key = peg$currPos * 62 + 0;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f0();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOData();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f1(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseProcessRule() {
    var s0, s1;

    var key = peg$currPos * 62 + 1;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = '';
    peg$savedPos = s0;
    s1 = peg$f2();
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseOData() {
    var s0, s1;

    var key = peg$currPos * 62 + 2;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsePathSegment();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f3(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c0) {
        s1 = peg$c0;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f4();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 47) {
          s1 = peg$c1;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f5();
        }
        s0 = s1;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseQueryOptions() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 62 + 3;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseQueryOption();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 38) {
        s4 = peg$c2;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseQueryOption();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f6(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseQueryOption() {
    var s0, s1, s2;

    var key = peg$currPos * 62 + 4;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseDollar();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSelectOption();
      if (s2 === peg$FAILED) {
        s2 = peg$parseFilterByOption();
        if (s2 === peg$FAILED) {
          s2 = peg$parseExpandOption();
          if (s2 === peg$FAILED) {
            s2 = peg$parseSortOption();
            if (s2 === peg$FAILED) {
              s2 = peg$parseTopOption();
              if (s2 === peg$FAILED) {
                s2 = peg$parseSkipOption();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseCountOption();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseInlineCountOption();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseFormatOption();
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s0 = s2;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseOperationParam();
      if (s0 === peg$FAILED) {
        s0 = peg$parseParameterAliasOption();
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDollar() {
    var s0, s1;

    var key = peg$currPos * 62 + 5;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 36) {
      s0 = peg$c3;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c4) {
        s0 = peg$c4;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseParameterAliasOption() {
    var s0, s1, s2, s3, s4, s5;

    var key = peg$currPos * 62 + 6;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c5;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseText();
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c6;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parseNumber();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s4;
          s5 = peg$f7(s2, s5);
        }
        s4 = s5;
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseBoolean();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$f8(s2, s5);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseQuotedText();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$f9(s2, s5);
            }
            s4 = s5;
            if (s4 === peg$FAILED) {
              s4 = peg$parseDate();
            }
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s5 = peg$f10(s2, s4);
          if (s5) {
            s5 = undefined;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f11(s2, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseOperationParam() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 62 + 7;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseText();
    if (input.charCodeAt(peg$currPos) === 61) {
      s2 = peg$c6;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseText();
      peg$savedPos = s0;
      s0 = peg$f12(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSortOption() {
    var s0, s1, s2, s3, s4, s5;

    var key = peg$currPos * 62 + 8;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c7) {
      s1 = peg$c7;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseSortProperty();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c8;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s5 !== peg$FAILED) {
          s5 = peg$parseSortProperty();
          if (s5 === peg$FAILED) {
            peg$currPos = s4;
            s4 = peg$FAILED;
          } else {
            s4 = s5;
          }
        } else {
          s4 = s5;
        }
      }
      if (s3.length < 1) {
        peg$currPos = s2;
        s2 = peg$FAILED;
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f13(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSortProperty() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 62 + 9;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsePropertyPath();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseboundary();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c9) {
          s4 = peg$c9;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c10) {
            s4 = peg$c10;
            peg$currPos += 4;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e11); }
          }
        }
        if (s4 !== peg$FAILED) {
          s2 = s4;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = '';
        peg$savedPos = s2;
        s3 = peg$f14(s1);
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f15(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseTopOption() {
    var s0, s1, s2;

    var key = peg$currPos * 62 + 10;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c11) {
      s1 = peg$c11;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseUnsignedInteger();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f16(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSkipOption() {
    var s0, s1, s2;

    var key = peg$currPos * 62 + 11;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c12) {
      s1 = peg$c12;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseUnsignedInteger();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f17(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseInlineCountOption() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 62 + 12;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c13) {
      s1 = peg$c13;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c14) {
        s2 = peg$c14;
        peg$currPos += 8;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c15) {
          s2 = peg$c15;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e16); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseText();
          peg$savedPos = s2;
          s3 = peg$f18();
          s2 = s3;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f19(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCountOption() {
    var s0, s1, s2;

    var key = peg$currPos * 62 + 13;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c16) {
      s1 = peg$c16;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBoolean();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f20(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseExpandOption() {
    var s0, s1, s2;

    var key = peg$currPos * 62 + 14;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c17) {
      s1 = peg$c17;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseExpandPropertyPathList();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f21(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSelectOption() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 62 + 15;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c18) {
      s1 = peg$c18;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 42) {
        s2 = peg$c19;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsePropertyPathList();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$f22(s3);
        }
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f23(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFilterByOption() {
    var s0, s1, s2;

    var key = peg$currPos * 62 + 16;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c20) {
      s1 = peg$c20;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseFilterByExpression();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f24(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseContentType() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var key = peg$currPos * 62 + 17;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$r0.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 43) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            if (peg$r0.test(input.charAt(peg$currPos))) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s8 !== peg$FAILED) {
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                if (peg$r0.test(input.charAt(peg$currPos))) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
              }
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s2 = [s2, s3, s4, s5];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c22) {
        s1 = peg$c22;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c23) {
          s1 = peg$c23;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c24) {
            s1 = peg$c24;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e26); }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFormatOption() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var key = peg$currPos * 62 + 18;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c25) {
      s1 = peg$c25;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseContentType();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 59) {
          s4 = peg$c26;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c27) {
            s5 = peg$c27;
            peg$currPos += 6;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e29); }
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (input.substr(peg$currPos, 9) === peg$c28) {
            s6 = peg$c28;
            peg$currPos += 9;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e30); }
          }
          if (s6 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c15) {
              s7 = peg$c15;
              peg$currPos += 4;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e16); }
            }
            if (s7 === peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c29) {
                s7 = peg$c29;
                peg$currPos += 7;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e31); }
              }
              if (s7 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c30) {
                  s7 = peg$c30;
                  peg$currPos += 4;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e32); }
                }
              }
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s3;
              s3 = peg$f25(s2, s7);
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = '';
          peg$savedPos = s3;
          s4 = peg$f26(s2);
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s0 = s3;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFilterByExpression() {
    var s0, s1, s2;

    var key = peg$currPos * 62 + 19;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = '';
    peg$savedPos = s1;
    s2 = peg$f27();
    s1 = s2;
    s2 = peg$parseFilterByExpressionLoop();
    if (s2 !== peg$FAILED) {
      s0 = s2;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFilterByExpressionLoop() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    var key = peg$currPos * 62 + 20;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = '';
    peg$savedPos = s1;
    s2 = peg$f28();
    s1 = s2;
    s2 = peg$currPos;
    s3 = peg$currPos;
    s4 = peg$parseFilterByValue();
    if (s4 !== peg$FAILED) {
      peg$savedPos = s3;
      s4 = peg$f29(s1, s4);
    }
    s3 = s4;
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = peg$currPos;
      s6 = peg$parseFilterByOperand();
      if (s6 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s7 = peg$f30(s1, s3, s6);
        if (s7) {
          s7 = undefined;
        } else {
          s7 = peg$FAILED;
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parseFilterByExpressionLoop();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f31(s1, s3, s6, s8);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        s5 = peg$currPos;
        s6 = peg$parseboundary();
        if (s6 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c31) {
            s7 = peg$c31;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e33); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parseboundary();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseGroupedPrimitive();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s5;
                s5 = peg$f32(s1, s3, s7, s9);
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = peg$parseFilterByOperand();
        if (s6 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s7 = peg$f30(s1, s3, s6);
          if (s7) {
            s7 = undefined;
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parseFilterByExpressionLoop();
            if (s8 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f31(s1, s3, s6, s8);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = peg$currPos;
          s6 = peg$parseboundary();
          if (s6 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c31) {
              s7 = peg$c31;
              peg$currPos += 2;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e33); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parseboundary();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseGroupedPrimitive();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s5;
                  s5 = peg$f32(s1, s3, s7, s9);
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
      }
      peg$savedPos = s2;
      s2 = peg$f33(s1, s3);
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = peg$currPos;
      peg$savedPos = peg$currPos;
      s3 = peg$f34(s1);
      if (s3) {
        s3 = undefined;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$f35(s1);
      }
      s2 = s3;
    }
    if (s2 !== peg$FAILED) {
      s0 = s2;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFilterByValue() {
    var s0;

    var key = peg$currPos * 62 + 21;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseGroupedPrecedenceExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFilterMethodCallExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFilterNegateExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$parseParameterAlias();
          if (s0 === peg$FAILED) {
            s0 = peg$parsePrimitive();
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsePrimitive() {
    var s0, s1, s2, s3, s4, s5;

    var key = peg$currPos * 62 + 22;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsespaces();
      s3 = peg$parsePrimitive();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsespaces();
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c33;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e35); }
        }
        if (s5 !== peg$FAILED) {
          s0 = s3;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseQuotedTextBind();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNumberBind();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBooleanBind();
          if (s0 === peg$FAILED) {
            s0 = peg$parseNull();
            if (s0 === peg$FAILED) {
              s0 = peg$parseDateBind();
              if (s0 === peg$FAILED) {
                s0 = peg$parseDuration();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseLambdaPropertyPath();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsePropertyPath();
                  }
                }
              }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseGroupedPrecedenceExpression() {
    var s0, s1, s2, s3, s4, s5;

    var key = peg$currPos * 62 + 23;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsespaces();
      s3 = peg$parseFilterByExpression();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsespaces();
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c33;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e35); }
        }
        if (s5 !== peg$FAILED) {
          s0 = s3;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFilterByOperand() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 62 + 24;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsespaces();
    if (input.substr(peg$currPos, 2) === peg$c34) {
      s2 = peg$c34;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c35) {
        s2 = peg$c35;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e37); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c36) {
          s2 = peg$c36;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e38); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c37) {
            s2 = peg$c37;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e39); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c38) {
              s2 = peg$c38;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e40); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c39) {
                s2 = peg$c39;
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e41); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c40) {
                  s2 = peg$c40;
                  peg$currPos += 3;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e42); }
                }
                if (s2 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c41) {
                    s2 = peg$c41;
                    peg$currPos += 2;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e43); }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c42) {
                      s2 = peg$c42;
                      peg$currPos += 3;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e44); }
                    }
                    if (s2 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c43) {
                        s2 = peg$c43;
                        peg$currPos += 3;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e45); }
                      }
                      if (s2 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c44) {
                          s2 = peg$c44;
                          peg$currPos += 3;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e46); }
                        }
                        if (s2 === peg$FAILED) {
                          if (input.substr(peg$currPos, 3) === peg$c45) {
                            s2 = peg$c45;
                            peg$currPos += 3;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e47); }
                          }
                          if (s2 === peg$FAILED) {
                            if (input.substr(peg$currPos, 3) === peg$c46) {
                              s2 = peg$c46;
                              peg$currPos += 3;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e48); }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseboundary();
      if (s3 !== peg$FAILED) {
        s0 = s2;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFilterNegateExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    var key = peg$currPos * 62 + 25;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsespaces();
    if (input.substr(peg$currPos, 3) === peg$c47) {
      s2 = peg$c47;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseboundary();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseFilterByValue();
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s5 = peg$c32;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e34); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsespaces();
            s7 = peg$parseFilterByExpression();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsespaces();
              if (input.charCodeAt(peg$currPos) === 41) {
                s9 = peg$c33;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e35); }
              }
              if (s9 !== peg$FAILED) {
                s4 = s7;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          s0 = [ s2, s4 ];
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseGroupedPrimitive() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var key = peg$currPos * 62 + 26;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsespaces();
      s3 = peg$currPos;
      s4 = [];
      s5 = peg$parsePrimitive();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c8;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parsespaces();
          s7 = [s7, s8];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s6 = peg$parsePrimitive();
          if (s6 === peg$FAILED) {
            peg$currPos = s5;
            s5 = peg$FAILED;
          } else {
            s5 = s6;
          }
        } else {
          s5 = s6;
        }
      }
      if (s4.length < 1) {
        peg$currPos = s3;
        s3 = peg$FAILED;
      } else {
        s3 = s4;
      }
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s4 = peg$c33;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e35); }
        }
        if (s4 !== peg$FAILED) {
          s0 = s3;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFilterMethodCallExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    var key = peg$currPos * 62 + 27;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c48) {
      s1 = peg$c48;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c49) {
        s1 = peg$c49;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e51); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c50) {
          s1 = peg$c50;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e52); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c51) {
            s1 = peg$c51;
            peg$currPos += 8;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e53); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c52) {
              s1 = peg$c52;
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e54); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c53) {
                s1 = peg$c53;
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e55); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 8) === peg$c54) {
                  s1 = peg$c54;
                  peg$currPos += 8;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e56); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c55) {
                    s1 = peg$c55;
                    peg$currPos += 5;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e57); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 17) === peg$c56) {
                      s1 = peg$c56;
                      peg$currPos += 17;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e58); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c57) {
                        s1 = peg$c57;
                        peg$currPos += 4;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e59); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 7) === peg$c58) {
                          s1 = peg$c58;
                          peg$currPos += 7;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e60); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c59) {
                            s1 = peg$c59;
                            peg$currPos += 4;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e61); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 6) === peg$c60) {
                              s1 = peg$c60;
                              peg$currPos += 6;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e62); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 11) === peg$c61) {
                                s1 = peg$c61;
                                peg$currPos += 11;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e63); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 11) === peg$c62) {
                                  s1 = peg$c62;
                                  peg$currPos += 11;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e64); }
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 6) === peg$c63) {
                                    s1 = peg$c63;
                                    peg$currPos += 6;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e65); }
                                  }
                                  if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 5) === peg$c64) {
                                      s1 = peg$c64;
                                      peg$currPos += 5;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e66); }
                                    }
                                    if (s1 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 3) === peg$c65) {
                                        s1 = peg$c65;
                                        peg$currPos += 3;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e67); }
                                      }
                                      if (s1 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 7) === peg$c66) {
                                          s1 = peg$c66;
                                          peg$currPos += 7;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e68); }
                                        }
                                        if (s1 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 5) === peg$c67) {
                                            s1 = peg$c67;
                                            peg$currPos += 5;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e69); }
                                          }
                                          if (s1 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 6) === peg$c68) {
                                              s1 = peg$c68;
                                              peg$currPos += 6;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e70); }
                                            }
                                            if (s1 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 10) === peg$c69) {
                                                s1 = peg$c69;
                                                peg$currPos += 10;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$e71); }
                                              }
                                              if (s1 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 11) === peg$c70) {
                                                  s1 = peg$c70;
                                                  peg$currPos += 11;
                                                } else {
                                                  s1 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$e72); }
                                                }
                                                if (s1 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 9) === peg$c71) {
                                                    s1 = peg$c71;
                                                    peg$currPos += 9;
                                                  } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$e73); }
                                                  }
                                                  if (s1 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 4) === peg$c72) {
                                                      s1 = peg$c72;
                                                      peg$currPos += 4;
                                                    } else {
                                                      s1 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$e74); }
                                                    }
                                                    if (s1 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 7) === peg$c73) {
                                                        s1 = peg$c73;
                                                        peg$currPos += 7;
                                                      } else {
                                                        s1 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$e75); }
                                                      }
                                                      if (s1 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 18) === peg$c74) {
                                                          s1 = peg$c74;
                                                          peg$currPos += 18;
                                                        } else {
                                                          s1 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$e76); }
                                                        }
                                                        if (s1 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 12) === peg$c75) {
                                                            s1 = peg$c75;
                                                            peg$currPos += 12;
                                                          } else {
                                                            s1 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$e77); }
                                                          }
                                                          if (s1 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 7) === peg$c76) {
                                                              s1 = peg$c76;
                                                              peg$currPos += 7;
                                                            } else {
                                                              s1 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$e78); }
                                                            }
                                                            if (s1 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 4) === peg$c77) {
                                                                s1 = peg$c77;
                                                                peg$currPos += 4;
                                                              } else {
                                                                s1 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$e79); }
                                                              }
                                                              if (s1 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 4) === peg$c78) {
                                                                  s1 = peg$c78;
                                                                  peg$currPos += 4;
                                                                } else {
                                                                  s1 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$e80); }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c32;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsespaces();
        s4 = peg$currPos;
        s5 = peg$currPos;
        s6 = [];
        s7 = peg$parseFilterByExpression();
        while (s7 !== peg$FAILED) {
          s6.push(s7);
          s7 = peg$currPos;
          s8 = peg$currPos;
          s9 = peg$parsespaces();
          if (input.charCodeAt(peg$currPos) === 44) {
            s10 = peg$c8;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parsespaces();
            s9 = [s9, s10, s11];
            s8 = s9;
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          if (s8 !== peg$FAILED) {
            s8 = peg$parseFilterByExpression();
            if (s8 === peg$FAILED) {
              peg$currPos = s7;
              s7 = peg$FAILED;
            } else {
              s7 = s8;
            }
          } else {
            s7 = s8;
          }
        }
        if (s6.length < 1) {
          peg$currPos = s5;
          s5 = peg$FAILED;
        } else {
          s5 = s6;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsespaces();
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          s5 = '';
          peg$savedPos = s4;
          s5 = peg$f36(s1);
          s4 = s5;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s5 = peg$f37(s1, s4);
          if (s5) {
            s5 = undefined;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s6 = peg$c33;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e35); }
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f38(s1, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLambdaMethodCall() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var key = peg$currPos * 62 + 28;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c79) {
      s1 = peg$c79;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c80) {
        s1 = peg$c80;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e82); }
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c32;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsespaces();
        s4 = peg$parseResourceName();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s5 = peg$c81;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e83); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseFilterByExpression();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsespaces();
              if (input.charCodeAt(peg$currPos) === 41) {
                s8 = peg$c33;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e35); }
              }
              if (s8 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f39(s1, s4, s6);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseResourceMethodCall() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    var key = peg$currPos * 62 + 29;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseResourceName();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c32;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsespaces();
        s4 = peg$currPos;
        s5 = peg$currPos;
        s6 = [];
        s7 = peg$parseFilterByExpression();
        while (s7 !== peg$FAILED) {
          s6.push(s7);
          s7 = peg$currPos;
          s8 = peg$currPos;
          s9 = peg$parsespaces();
          if (input.charCodeAt(peg$currPos) === 44) {
            s10 = peg$c8;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parsespaces();
            s9 = [s9, s10, s11];
            s8 = s9;
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          if (s8 !== peg$FAILED) {
            s8 = peg$parseFilterByExpression();
            if (s8 === peg$FAILED) {
              peg$currPos = s7;
              s7 = peg$FAILED;
            } else {
              s7 = s8;
            }
          } else {
            s7 = s8;
          }
        }
        if (s6.length < 1) {
          peg$currPos = s5;
          s5 = peg$FAILED;
        } else {
          s5 = s6;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsespaces();
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          s5 = '';
          peg$savedPos = s4;
          s5 = peg$f40(s1);
          s4 = s5;
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s5 = peg$c33;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e35); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f41(s1, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsePropertyPathList() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 62 + 30;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsePropertyPath();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s3 = peg$c8;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s3 !== peg$FAILED) {
        s3 = peg$parsePropertyPath();
        if (s3 === peg$FAILED) {
          peg$currPos = s2;
          s2 = peg$FAILED;
        } else {
          s2 = s3;
        }
      } else {
        s2 = s3;
      }
    }
    if (s1.length < 1) {
      peg$currPos = s0;
      s0 = peg$FAILED;
    } else {
      s0 = s1;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsePropertyPath() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    var key = peg$currPos * 62 + 31;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseResourceName();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsePropertyPath();
        if (s4 !== peg$FAILED) {
          s2 = s4;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c82) {
        s4 = peg$c82;
        peg$currPos += 7;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e84); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s6 = peg$c32;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e34); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$currPos;
          s8 = peg$parseDollar();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseFilterByOption();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s7;
              s7 = peg$f42(s1, s2, s9);
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s8 = peg$c33;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e35); }
            }
            if (s8 !== peg$FAILED) {
              s5 = s7;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        peg$savedPos = s3;
        s3 = peg$f43(s1, s2, s5);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f44(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseExpandPropertyPathList() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 62 + 32;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseExpandPropertyPath();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s3 = peg$c8;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s3 !== peg$FAILED) {
        s3 = peg$parseExpandPropertyPath();
        if (s3 === peg$FAILED) {
          peg$currPos = s2;
          s2 = peg$FAILED;
        } else {
          s2 = s3;
        }
      } else {
        s2 = s3;
      }
    }
    if (s1.length < 1) {
      peg$currPos = s0;
      s0 = peg$FAILED;
    } else {
      s0 = s1;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseExpandPropertyPath() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    var key = peg$currPos * 62 + 33;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseResourceName();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c82) {
        s3 = peg$c82;
        peg$currPos += 7;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e84); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$f45(s1);
      }
      s2 = s3;
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c32;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        s6 = peg$currPos;
        s7 = [];
        s8 = peg$parseQueryOption();
        while (s8 !== peg$FAILED) {
          s7.push(s8);
          s8 = peg$currPos;
          if (peg$r1.test(input.charAt(peg$currPos))) {
            s9 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e85); }
          }
          if (s9 !== peg$FAILED) {
            s9 = peg$parseQueryOption();
            if (s9 === peg$FAILED) {
              peg$currPos = s8;
              s8 = peg$FAILED;
            } else {
              s8 = s9;
            }
          } else {
            s8 = s9;
          }
        }
        if (s7.length < 1) {
          peg$currPos = s6;
          s6 = peg$FAILED;
        } else {
          s6 = s7;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s5;
          s6 = peg$f46(s1, s2, s6);
        }
        s5 = s6;
        if (s5 === peg$FAILED) {
          s5 = peg$currPos;
          s6 = '';
          peg$savedPos = s5;
          s6 = peg$f47(s1, s2);
          s5 = s6;
        }
        if (s5 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s6 = peg$c33;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e35); }
          }
          if (s6 !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s5 = peg$c1;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parsePropertyPath();
        if (s6 !== peg$FAILED) {
          s4 = s6;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f48(s1, s2, s3, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLambdaPropertyPath() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 62 + 34;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseResourceName();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseLambdaPropertyPath();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$f49(s1, s4);
        }
        s3 = s4;
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseLambdaMethodCall();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$f50(s1, s4);
          }
          s3 = s4;
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseResourceMethodCall();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$f51(s1, s4);
            }
            s3 = s4;
          }
        }
        if (s3 !== peg$FAILED) {
          s0 = s3;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseKey() {
    var s0, s1, s2, s3, s4, s5, s6;

    var key = peg$currPos * 62 + 35;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKeyBind();
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parseNamedKeyBind();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c8;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s6 !== peg$FAILED) {
            s6 = peg$parseNamedKeyBind();
            if (s6 === peg$FAILED) {
              peg$currPos = s5;
              s5 = peg$FAILED;
            } else {
              s5 = s6;
            }
          } else {
            s5 = s6;
          }
        }
        if (s4.length < 1) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$f52(s3);
        }
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c33;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e35); }
        }
        if (s3 !== peg$FAILED) {
          s0 = s2;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNamedKeyBind() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 62 + 36;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseResourceName();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c6;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseKeyBind();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f53(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseKeyBind() {
    var s0;

    var key = peg$currPos * 62 + 37;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseNumberBind();
    if (s0 === peg$FAILED) {
      s0 = peg$parseQuotedTextBind();
      if (s0 === peg$FAILED) {
        s0 = peg$parseParameterAlias();
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLinks() {
    var s0, s1, s2;

    var key = peg$currPos * 62 + 38;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c83) {
      s1 = peg$c83;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSubPathSegment();
      if (s2 !== peg$FAILED) {
        s0 = s2;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsePathSegment() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var key = peg$currPos * 62 + 39;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 47) {
      s2 = peg$c1;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      s4 = peg$parseResourceName();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s3;
        s4 = peg$f54(s4);
      }
      s3 = s4;
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$currPos;
        s6 = peg$parseKey();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s5;
          s6 = peg$f55(s3, s6);
        }
        s5 = s6;
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parseLinks();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s6;
            s7 = peg$f56(s3, s7);
          }
          s6 = s7;
          if (s6 === peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseSubPathSegment();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s6;
              s7 = peg$f57(s3, s7);
            }
            s6 = s7;
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          if (input.substr(peg$currPos, 7) === peg$c82) {
            s5 = peg$c82;
            peg$currPos += 7;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e84); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$f58(s3);
          }
          s4 = s5;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        peg$savedPos = s1;
        s1 = peg$f59(s3);
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = peg$parseContentReference();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseLinks();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$f60(s2, s4);
        }
        s3 = s4;
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseSubPathSegment();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$f61(s2, s4);
          }
          s3 = s4;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s1;
        s1 = peg$f62(s2);
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 63) {
        s3 = peg$c84;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e87); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parseQueryOptions();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s4;
          s5 = peg$f63(s1, s5);
        }
        s4 = s5;
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f64(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSubPathSegment() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    var key = peg$currPos * 62 + 40;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseResourceName();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$f65(s3);
      }
      s2 = s3;
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseKey();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$f66(s2, s4);
        }
        s3 = s4;
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c83) {
          s5 = peg$c83;
          peg$currPos += 7;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e86); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseSubPathSegment();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f67(s2, s6);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseSubPathSegment();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$f68(s2, s5);
          }
          s4 = s5;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c82) {
          s6 = peg$c82;
          peg$currPos += 7;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e84); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s5;
          s6 = peg$f69(s2);
        }
        s5 = s6;
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 63) {
          s7 = peg$c84;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e87); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$currPos;
          s9 = peg$parseQueryOptions();
          if (s9 !== peg$FAILED) {
            peg$savedPos = s8;
            s9 = peg$f70(s2, s9);
          }
          s8 = s9;
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s7 = [s7, s8];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f71(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseResourceName() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 62 + 41;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e88); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e88); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f72(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNumber() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var key = peg$currPos * 62 + 42;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseSign();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = [];
      if (peg$r3.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e89); }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          if (peg$r3.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e89); }
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s6 = peg$c85;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e90); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          if (peg$r3.test(input.charAt(peg$currPos))) {
            s8 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e89); }
          }
          if (s8 !== peg$FAILED) {
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              if (peg$r3.test(input.charAt(peg$currPos))) {
                s8 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e89); }
              }
            }
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f73(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseUnsignedInteger() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 62 + 43;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (peg$r3.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e89); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e89); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f74(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNull() {
    var s0, s1;

    var key = peg$currPos * 62 + 44;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c86) {
      s1 = peg$c86;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e91); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f75();
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBoolean() {
    var s0, s1;

    var key = peg$currPos * 62 + 45;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c87) {
      s1 = peg$c87;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e92); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f76();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c88) {
        s1 = peg$c88;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e93); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f77();
      }
      s0 = s1;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDuration() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    var key = peg$currPos * 62 + 46;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c89) {
      s1 = peg$c89;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e94); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseApostrophe();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSign();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 80) {
            s4 = peg$c90;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e95); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseUnsignedInteger();
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 68) {
                s7 = peg$c91;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e96); }
              }
              if (s7 !== peg$FAILED) {
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 84) {
              s7 = peg$c92;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e97); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$currPos;
              s9 = peg$parseUnsignedInteger();
              if (s9 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 72) {
                  s10 = peg$c93;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e98); }
                }
                if (s10 !== peg$FAILED) {
                  s8 = s9;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              if (s8 === peg$FAILED) {
                s8 = null;
              }
              s9 = peg$currPos;
              s10 = peg$parseUnsignedInteger();
              if (s10 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 77) {
                  s11 = peg$c94;
                  peg$currPos++;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e99); }
                }
                if (s11 !== peg$FAILED) {
                  s9 = s10;
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
              if (s9 === peg$FAILED) {
                s9 = null;
              }
              s10 = peg$currPos;
              s11 = peg$parseDurationNumber();
              if (s11 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 83) {
                  s12 = peg$c95;
                  peg$currPos++;
                } else {
                  s12 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e100); }
                }
                if (s12 !== peg$FAILED) {
                  s10 = s11;
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              peg$savedPos = peg$currPos;
              s11 = peg$f78(s3, s5, s8, s9, s10);
              if (s11) {
                s11 = undefined;
              } else {
                s11 = peg$FAILED;
              }
              if (s11 !== peg$FAILED) {
                peg$savedPos = s6;
                s6 = peg$f79(s3, s5, s8, s9, s10);
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            peg$savedPos = peg$currPos;
            s7 = peg$f80(s3, s5, s6);
            if (s7) {
              s7 = undefined;
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parseApostrophe();
              if (s8 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f81(s3, s5, s6);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDurationNumber() {
    var s0, s1, s2, s3, s4, s5, s6;

    var key = peg$currPos * 62 + 47;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = [];
    if (peg$r3.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e89); }
    }
    if (s4 !== peg$FAILED) {
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e89); }
        }
      }
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s4 = peg$c85;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e90); }
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e89); }
        }
        if (s6 !== peg$FAILED) {
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (peg$r3.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e89); }
            }
          }
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f82(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parseUnsignedInteger();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseText() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 62 + 48;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (peg$r4.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      if (peg$r4.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e101); }
      }
    }
    s1 = input.substring(s1, peg$currPos);
    peg$savedPos = s0;
    s1 = peg$f83(s1);
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSign() {
    var s0, s1;

    var key = peg$currPos * 62 + 49;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c21;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c96) {
        s1 = peg$c96;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e102); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f84();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s0 = peg$c97;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e103); }
        }
        if (s0 === peg$FAILED) {
          s0 = '';
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseApostrophe() {
    var s0, s1;

    var key = peg$currPos * 62 + 50;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 39) {
      s0 = peg$c98;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e104); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c99) {
        s1 = peg$c99;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e105); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f85();
      }
      s0 = s1;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseQuotedText() {
    var s0, s1, s2, s3, s4, s5;

    var key = peg$currPos * 62 + 51;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseApostrophe();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parseApostrophe();
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e106); }
        }
        if (s5 !== peg$FAILED) {
          s3 = s5;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseApostrophe();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseApostrophe();
          if (s5 !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseApostrophe();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e106); }
          }
          if (s5 !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseApostrophe();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseApostrophe();
            if (s5 !== peg$FAILED) {
              s3 = s5;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      }
      s3 = peg$parseApostrophe();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f86(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseParameterAlias() {
    var s0, s1, s2;

    var key = peg$currPos * 62 + 52;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c5;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseResourceName();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f87(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNumberBind() {
    var s0, s1;

    var key = peg$currPos * 62 + 53;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseNumber();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f88(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDate() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 62 + 54;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c100) {
      s2 = peg$c100;
      peg$currPos += 8;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e107); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s1;
      s2 = peg$f89();
    }
    s1 = s2;
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c52) {
        s2 = peg$c52;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$f90();
      }
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseQuotedText();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$f91(s1, s3);
      }
      s2 = s3;
      if (s2 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s3 = peg$f92(s1, s2);
        if (s3) {
          s3 = peg$FAILED;
        } else {
          s3 = undefined;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f93(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDateBind() {
    var s0, s1;

    var key = peg$currPos * 62 + 55;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseDate();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f94(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBooleanBind() {
    var s0, s1;

    var key = peg$currPos * 62 + 56;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBoolean();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f95(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseContentReference() {
    var s0, s1, s2;

    var key = peg$currPos * 62 + 57;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 36) {
      s1 = peg$c3;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseResourceName();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f96(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseQuotedTextBind() {
    var s0, s1;

    var key = peg$currPos * 62 + 58;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseQuotedText();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f97(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseboundary() {
    var s0, s1;

    var key = peg$currPos * 62 + 59;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    peg$silentFails--;
    if (s1 !== peg$FAILED) {
      peg$currPos = s0;
      s0 = undefined;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = [];
      s1 = peg$parsespace();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsespace();
        }
      } else {
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsespaces() {
    var s0, s1;

    var key = peg$currPos * 62 + 60;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    s1 = peg$parsespace();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parsespace();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsespace() {
    var s0;

    var key = peg$currPos * 62 + 61;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c101;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e108); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c102) {
        s0 = peg$c102;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e109); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 43) {
          s0 = peg$c21;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }


	const methods = {
		cast: [ 1, 2 ],
		ceiling: 1,
		concat: 2,
		contains: 2,
		date: 1,
		day: 1,
		endswith: 2,
		floor: 1,
		fractionalseconds: 1,
		hour: 1,
		indexof: 2,
		isof: [ 1, 2 ],
		length: 1,
		maxdatetime: 0,
		mindatetime: 0,
		minute: 1,
		month: 1,
		now: 0,
		replace: 3,
		round: 1,
		second: 1,
		startswith: 2,
		substringof: 2,
		substring: [ 2, 3 ],
		time: 1,
		tolower: 1,
		totaloffsetminutes: 1,
		totalseconds: 1,
		toupper: 1,
		trim: 1,
		year: 1
	};

	const operatorPrecedence = {
		or: 0,
		and: 0,
		eq: 1,
		ne: 1,
		gt: 1,
		ge: 1,
		lt: 1,
		le: 1,
		sub: 2,
		add: 3,
		mod: 4,
		div: 5,
		mul: 6
	};

	// v4 operator precedence
	// const operatorPrecedence = {
	// 	or: 0,
	// 	and: 1,
	// 	eq: 2,
	// 	ne: 2,
	// 	gt: 3,
	// 	ge: 3,
	// 	lt: 3,
	// 	le: 3,
	// 	add: 4,
	// 	sub: 4,
	// 	mul: 5,
	// 	div: 5,
	// 	mod: 5
	// };

	let binds = [];
	let precedence = 0;
	function reset() {
		binds = [];
		precedence = 0;
	};

	function CollapseObjectArray(options) {
		const optionsObj = {};
		for(const i in options) {
			optionsObj[options[i].name] = options[i].value;
		}
		return optionsObj;
	};

	function Bind(type, value) {
		binds.push([type, value])
		return { bind: binds.length - 1 }
	}

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
